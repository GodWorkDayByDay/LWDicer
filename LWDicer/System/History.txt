////////////////////////////////////////////////////////////////////////////////////////////
// How to 
// write histroy until using SVN or DVCS
// Grade : ★ to ★★★

////////////////////////////////////////////////////////////////////////////////////////////
// SJR

// Version : 0.0.1
// Grade : ★
// Date : 2016-01-29
// Context
1. Data 관리를 structure -> class로 바꾸고, 이를 위해 class의 deep copy함수를 만들었음.
함수 사용법 : T target = ObjectExtensions.Copy(T source);
2. SPos_XY,XYT,XYTZ 등의 structure 등을 class로 변경, structure는 hardware library 때문에 필요한
경우가 아니면 자제할 것.
3. MLWDicer class에서 각 component class 생성 및 초기화 하는 부분의 틀을 만들어가기 시작함.
5. 그외 바뀐 부분들에 대하여 build success 확인

// Version : 0.0.2
// Grade : ★
// Date : 2016-02-14
// Context
1. DataBase를 SQLite 사용하기로 결정. NuGet -> System.Data.SQLite 추가
serialization 기능을 이용해서 자동으로 data class save, load하는 부분 완료. NuGet -> Newtonsoft.Json 추가
2. Database를 용도별로 몇개로 구분. MLog에서 파일로 저장하는 기능에 추가로 DB에 저장하는 기능도 추가
3. DBManager class 생성 및 입출력 일반화, backup, delete, insert등의 일반 기능 적용.
4. Net Runtime Library v4.6 으로 변경
5. app.setting을 이용하기 위해서 System.Configuration 참조 추가 
6. system data, model data, log save/load 기능 추가

// Version : 0.0.3
// Grade : ★
// Date : 2016-02-22
// Context
1. 정월대보름
2. UI와 통합.
3. IO info file save/load 기능 추가
4. Git에 올리는 최초 버전
5. 4를 위해 참조에서 syncfusion lib 경로 수정

// Version : 0.0.4
// Grade : ★
// Date : 2016-03-02
// Context
1. Error info file save/load 기능 추가

////////////////////////////////////////////////////////////////////////////////////////////
// LJJ


////////////////////////////////////////////////////////////////////////////////////////////
// LHS